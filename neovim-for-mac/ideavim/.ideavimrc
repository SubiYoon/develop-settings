" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

let mapleader = "\<Space>"

" Source your .vimrc
source ~/.vimrc

"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5
set noinsertmode

" upper/lower case ignore
set ignorecase
set smartcase

" Beep disable
set visualbell
set noerrorbells

" Plugin
set incsearch
set surround
set NERDTree
set commentary #gc, gcc comment
set argtextobj "dia: delete an argument, cia: change inner argument

" which-key setting
set which-key
set notimeout " 키입력 제한시간 해제
" set ttimeoutlen=50 " 키입력 제한시간 설정
let g:WhichKey_FontSize = 15

" clipboard copy
vmap <leader>y "+y
let g:WhichKeyDesc_clipboard_copy = '<leader>y 📋copy clipboard'

" Tab관련 키맵핑
let g:WhichKeyDesc_tab = '<leader>t 🪟Tab'
nnoremap <leader>t1 :tabnext 1<CR>
let g:WhichKeyDesc_tab_tab1 = '<leader>t1 🪟Tab 1'
nnoremap <leader>t2 :tabnext 2<CR>
let g:WhichKeyDesc_tab_tab2 = '<leader>t2 🪟Tab 2'
nnoremap <leader>t3 :tabnext 3<CR>
let g:WhichKeyDesc_tab_tab3 = '<leader>t3 🪟Tab 3'
nnoremap <leader>t4 :tabnext 4<CR>
let g:WhichKeyDesc_tab_tab4 = '<leader>t4 🪟Tab 4'
nnoremap <leader>t5 :tabnext 5<CR>
let g:WhichKeyDesc_tab_tab5 = '<leader>t5 🪟Tab 5'
nnoremap <leader>t6 :tabnext 6<CR>
let g:WhichKeyDesc_tab_tab6 = '<leader>t6 🪟Tab 6'
nnoremap <leader>t7 :tabnext 7<CR>
let g:WhichKeyDesc_tab_tab7 = '<leader>t7 🪟Tab 7'
nnoremap <leader>t8 :tabnext 8<CR>
let g:WhichKeyDesc_tab_tab8 = '<leader>t8 🪟Tab 8'
nnoremap <leader>t9 :tabnext 9<CR>
let g:WhichKeyDesc_tab_tab9 = '<leader>t9 🪟Tab 9'
let g:WhichKeyDesc_tab_close = '<leader>tc 🗑️Close'
nnoremap <leader>tcc :action CloseEditor<CR>
let g:WhichKeyDesc_tab_close_this = '<leader>tcc 🗑️Tab Close'
nnoremap <leader>tca :action CloseAllEditorsButActive<CR>
let g:WhichKeyDesc_tab_close_all = '<leader>tca 🗑️Tab Close All'

" Search 관련 키맵핑
let g:WhichKeyDesc_find = '<leader>f 📂Find'
map <leader>ff :action GotoFile<CR>
let g:WhichKeyDesc_find_file_name = '<leader>ff 📂File By Name'
map <leader>fw :action FindInPath<CR>
let g:WhichKeyDesc_find_file_word = '<leader>fw 📂File By Word'

" Project tree 오픈
let g:WhichKeyDesc_project = '<leader>e 🗂️Focus Project'
nnoremap <leader>e :NERDTree<CR>

" ToolWindow 관련 키맵핑
let g:WhichKeyDesc_open = '<leader>o 🗃️Open'
nnoremap <leader>oD :action ActivateDatabaseToolWindow<CR>
let g:WhichKeyDesc_open_database = '<leader>oD 📚Database'
nnoremap <leader>ot :action ActivateTerminalToolWindow<CR>
let g:WhichKeyDesc_open_terminal = '<leader>ot 🏗️terminal'
nnoremap <leader>oT :action ActivateTODOToolWindow<CR>
let g:WhichKeyDesc_open_todo = '<leader>oT ☑️TODO'
nnoremap <leader>os :action ActivateStructureToolWindow<CR>
let g:WhichKeyDesc_open_Structure = '<leader>os 🧾Structure'
nnoremap <leader>od :action ActivateDebugToolWindow<CR>
let g:WhichKeyDesc_open_debug = '<leader>od 🐞Debug'

" Debug 관련 키맵핑
let g:WhichKeyDesc_debug = '<leader>d 🐞Debug'
nnoremap <leader>dd :action ToggleLineBreakpoint<CR>
let g:WhichKeyDesc_debug_breakpoint = '<leader>dd 🐞Breakpoint'
nnoremap <leader>dh :action QuickEvaluateExpression<CR>
let g:WhichKeyDesc_debug_hober = '<leader>dh 🐞Hover'
nnoremap <leader>dv :action ViewBreakpoints<CR>
let g:WhichKeyDesc_debug_breakpoints = '<leader>dv 🐞View Breakpoints'
nnoremap <leader>dr :action ChooseDebugConfiguration<CR>
let g:WhichKeyDesc_debug_run = '<leader>dr 🐞Run'
nnoremap <leader>ds :action Stop<CR>
let g:WhichKeyDesc_debug_stop = '<leader>ds 🐞Stop'

" Re 키맵핑
let g:WhichKeyDesc_re = '<leader>r ♻️Re'
let g:WhichKeyDesc_re_name = '<leader>rn 🪪Name'
nnoremap <leader>rn :action RenameElement<CR>

" Switcher
let g:WhichKeyDesc_switcher = '<leader>s ♻️Switcher'
nnoremap <leader>s :action Switcher<CR>

" Git
let g:WhichKeyDesc_git = '<leader>g 🐙Git'
let g:WhichKeyDesc_git_menu = '<leader>gg 🐙Menu'
nnoremap <leader>gg :action ActivateVersionControlToolWindow<CR>:action ActivateCommitToolWindow<CR>
let g:WhichKeyDesc_git_commit = '<leader>gc 🐙Commit'
nnoremap <leader>gc :action ActivateCommitToolWindow<CR>
let g:WhichKeyDesc_git_history = '<leader>gh 🐙History'
nnoremap <leader>gh :action ActivateVersionControlToolWindow<CR>
let g:WhichKeyDesc_git_reset = '<leader>gr 🐙Reset'
let g:WhichKeyDesc_git_reset_hunk = '<leader>grh 🐙Hunk'
nnoremap <leader>grh :action Vcs.RollbackChangedLines<CR>

" Create 관련 키맵핑
let g:WhichKeyDesc_create = '<leader>c 🔨Create'
nnoremap <leader>cv :action IntroduceVariable<CR>
let g:WhichKeyDesc_create_variable = '<leader>cv 🔨Variable'
nnoremap <leader>cc :action GenerateConstructor<CR>
let g:WhichKeyDesc_create_constructor = '<leader>cc 🔨Constructor'
nnoremap <leader>cg :action GenerateGetter<CR>
let g:WhichKeyDesc_create_getter = '<leader>cg 🔨Getter'
nnoremap <leader>cs :action GenerateSetter<CR>
let g:WhichKeyDesc_create_setter = '<leader>cs 🔨Setter'
nnoremap <leader>ct :action GotoTest<CR>
let g:WhichKeyDesc_create_test = '<leader>ct 🔨Test Class'
let g:WhichKeyDesc_create_extract = '<leader>ce 🔨Extract'
map <leader>cem :action ExtractMethod<CR>
let g:WhichKeyDesc_create_extract_method = '<leader>cem 🔨Method'
map <leader>cec :action ExtractClass<CR>
let g:WhichKeyDesc_create_extract_class = '<leader>cec 🔨Class'

" Code Action
let g:WhichKeyDesc_code_action = '<leader>ca 🧨Code Action'
nnoremap <leader>ca :action ShowIntentionActions<CR>

" Hide Action
let g:WhichKeyDesc_hide = '<leader>h 🫥Hide'
let g:WhichKeyDesc_hide_all = '<leader>ha 🫥All'
nnoremap <leader>ha :action HideAllWindows<CR>
let g:WhichKeyDesc_hide_side = '<leader>hs 🫥Side'
nnoremap <leader>hs :action HideSideWindows<CR>

" buffer Maximize
let g:WhichKeyDesc_maximize_buffer = '<leader>m 🖥️Maximize Buffer'
nnoremap <leader>m :action MaximizeEditorInSplit<CR>

" Test Method 함수에 위치하면 함수실행 함수 밖이면 클래스 실행
nnoremap <leader>T :action RunClass<CR>
let g:WhichKeyDesc_test = '<leader>T 🧪Test'

" Folding / Expanding
let g:WhichKeyDesc_block = '<leader>z 🧱block'
nnoremap <leader>zc :action CollapseRegionRecursively<CR>
let g:WhichKeyDesc_block_folding = '<leader>zc 🧱Close'
nnoremap <leader>zo :action ExpandRegionRecursively<CR>
let g:WhichKeyDesc_block_expanding = '<leader>zo 🧱Open'

" 버퍼 간 이동 매핑
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Don't use Ex mode, use Q for formatting.
map Q gq

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins

" Highlight copied text
Plug 'machakann/vim-highlightedyank'
" Commentary plugin
Plug 'tpope/vim-commentary'
" surround Plugin
Plug 'tpope/vim-surround'


"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_vim = '<leader>v 🧑🏻‍💻VIM'
let g:WhichKeyDesc_vim_source = '<leader>va ⚙️apply'
nnoremap <leader>va :source ~/.ideavimrc<CR>
let g:WhichKeyDesc_vim_edit = '<leader>ve ⚙️edit'
nnoremap <leader>ve :e ~/.ideavimrc<CR>
